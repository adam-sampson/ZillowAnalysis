{
    "collab_server" : "",
    "contents" : "## Load libraries or ask to install them\nloadLibraries <- function(requiredPackages = NULL) {\n  for(pack in requiredPackages) {\n    # If statement will either load the library or give user the option to auto-install if not available\n    if(!require(pack,character.only = TRUE)) {\n      # ask the user for permission to install\n      if(menu(c('yes','no'),title=paste0('Package ',pack,' not found. Would you like to install?'))==1) {\n        install.packages(pack)\n        delay(1000)\n        require(pack)\n      }\n    }\n  }\n}\n\n## Load Jefferson County data for addresses and zoning and output single residence addresses\ncreateResidentialAddressList <- function(jcky.zoning, jcky.addresses) {\n  \n  if(is.character(jcky.zoning)==TRUE && file.exists(jcky.zoning)) {\n    jcky.zoning <- read_csv(jcky.zoning)\n  } else if(is.data.frame(jcky.zoning)==FALSE) {\n    stop(\"Expecting file name string or dataframe as input\")\n  }\n  \n  if(is.character(jcky.addresses)==TRUE && file.exists(jcky.addresses)) {\n    jcky.addresses <- read_csv(jcky.addresses)\n  } else if(is.data.frame(jcky.addresses)==FALSE) {\n    stop(\"Expecting file name string or dataframe as input\")\n  }\n    \n  \n  jcky.zoning <- jcky.zoning %>% select(ZONING_COD,ZONING_NAM,ZONING_TYP) %>%\n                 distinct()\n  names(jcky.zoning)[1] <- \"ZONING_CODE\"\n  \n  \n  jcky.addresses <- jcky.addresses %>% select(FULL_ADDRESS,APT,MUNI_NAME,ZIPCODE,ZONING_CODE)\n  jcky.addresses <- jcky.addresses %>% filter(is.na(APT)==TRUE) %>% select(-APT)\n  \n  jcky.addresses <- left_join(jcky.addresses,jcky.zoning)\n  jcky.addresses <- jcky.addresses %>% filter(ZONING_TYP == \"RESIDENTIAL\") %>%\n                    filter(ZONING_NAM == \"RES SINGLE FAMILY\" | ZONING_NAM == \"RES SINGLE FAMILY OVERLAY\" | \n                           ZONING_NAM == \"RURAL RESIDENTIAL\" | ZONING_NAM == \"RURAL RES OVERLAY\")\n}\n\nrecursiveListExtract <- function(xml.obj) {\n  ## We can take advantage of the fact that only objects without children have values\n  \n}\n\nflattenZillowList <- function(in.list) {\n  # flatten the list \n  in.list <- unlist(in.list)\n  \n  # cleanup the output to usable format\n  # each actual name/value is in format name = in.list[n] value = in.list[n+2] so check for this\n  out.mat <- NULL\n  for(cnt in 1:(length(in.list)-2)) {\n    if(endsWith(attributes(in.list[cnt])$names,\"name\") == TRUE && \n       endsWith(attributes(in.list[cnt+2])$names,\"value\") == TRUE) {\n      temp <- matrix(data=in.list[[cnt+2]],dimnames = list(NULL,in.list[[cnt]]))\n      out.mat <- cbind(out.mat,temp)\n    }\n  }\n  out.mat <- as.data.frame(out.mat,stringsAsFactors=FALSE)\n  return(out.mat)\n}\n\nmultipleDeepSearchZillow <- function(in.df, posVector) {\n  zillowSearchOut <- NULL\n  for(i in posVector) {\n    zillowTemp <- GetDeepSearchResults(address = in.df$FULL_ADDRESS[i],citystatezip = as.character(in.df$ZIPCODE[i]),zws_id = get_zillow_web_service_id())\n    zillowTemp <- flattenZillowList(zillowTemp)\n    zillowSearchOut <- bind_rows(zillowSearchOut,zillowTemp)\n  }\n  return(zillowSearchOut)\n}\n\nmultipleDeepCompsZillow <- function(zpidVector,count) {\n  zillowUpdatedOut <- NULL\n  for(i in 1:length(zpidVector)) {\n    zillowTemp <- GetDeepComps(zpid = as.character(zpidVector[i]),count=count,zws_id = get_zillow_web_service_id())\n    if(startsWith(zillowTemp[[2]]$text,\"Error\")==FALSE) {\n      for(j in 1:length(zillowTemp[[3]][[1]][[2]])) {\n        zillowTemp2 <- flattenZillowList(zillowTemp[[3]][[1]][[2]][j])\n        zillowUpdatedOut <- bind_rows(zillowUpdatedOut,zillowTemp2)\n      }\n    }\n  }\n  return(zillowUpdatedOut)\n}\n\nmultipleUpdatedPropertyDetails <- function(zpidVector) {\n  zillowUpdatedOut <- NULL\n  for(i in 1:length(zpidVector)) {\n    zillowTemp <- GetUpdatedPropertyDetails(zpid = as.character(zpidVector[i]),zws_id = get_zillow_web_service_id())\n    if(startsWith(zillowTemp[[2]]$text,\"Error\")==FALSE) {\n      zillowTemp <- flattenZillowList(zillowTemp)\n      zillowUpdatedOut <- bind_rows(zillowUpdatedOut,zillowTemp)\n    }\n  }\n  return(zillowUpdatedOut)\n}\n",
    "created" : 1508705715139.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1481759286",
    "id" : "5B674A75",
    "lastKnownWriteTime" : 1508698436,
    "last_content_update" : 1508698436,
    "path" : "~/MSA/Fall 2017/ZillowAnalysis/Functions.R",
    "project_path" : "Functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}