if(exists("out")==TRUE) {
if(is.null(temp)==FALSE) {
out <- cbind(out,temp)
}
} else {
out <- temp
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(input.list$children$text))
out <- data.frame(paste0(input.list$children$text))
print(out)
colnames(out) <- input.list$name
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(exists("out")==TRUE) {
if(is.null(temp)==FALSE) {
out <- cbind(out,temp)
}
} else {
out <- temp
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(input.list[[1]]))
out <- data.frame(paste0(input.list$children$text))
print(out)
colnames(out) <- input.list$name
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
print(paste0(unlist(input.list[[1]])))
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(exists("out")==TRUE) {
if(is.null(temp)==FALSE) {
out <- cbind(out,temp)
}
} else {
out <- temp
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]])))
out <- data.frame(paste0(input.list$children$text))
print(out)
colnames(out) <- input.list$name
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
zillowTemp$response$children$properties$children$principal$children$zpid$children$text
attributes(zillowTemp$response$children$properties$children$principal$children$zpid$children$text)
zillowTemp$response$children$properties$children$principal$children$zpid$children$text$value
zillowTemp$response$children$properties$children$principal$children$zpid$children$text
zillowTemp$response$children$properties$children$principal$children$zpid[[1]]
zillowTemp$response$children$properties$children$principal$children$zpid[[1]]$value
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(exists("out")==TRUE) {
if(is.null(temp)==FALSE) {
out <- cbind(out,temp)
}
} else {
out <- temp
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(exists("out")==TRUE) {
if(is.null(temp)==FALSE) {
out <- cbind(out,temp)
}
} else {
out <- temp
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
length(data.frame())
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(exists("out")==TRUE) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(length("out")>0) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(length("out")>0) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
#if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
rm(out)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(length("out")>0) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
#if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(length(out)>0) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
#if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(exists('out')==TRUE) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
#if(exists("out")==FALSE) {out <- NULL}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(exists('out')==TRUE) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- data.frame()}
return(out)
}
testdf <- recursiveListExtract(zillowTemp$response)
View(testdf)
zillowTemp <- GetDeepComps(zpid = as.character(zillowSearch.df$zpid[1]),
count=3,
zws_id = get_zillow_web_service_id())
testdf <- recursiveListExtract(zillowTemp$response)
zillowTemp$response
zillowTemp$response$children
zillowTemp$response$children$properties
zillowTemp$response$children$properties$chilren
zillowTemp$response$children$properties$children
?rbind
?bind_rows
multipleListExtract <- function(input.list) {
for(each.list in input.list$children) {
tempList <- recursiveListExtract(each.list)
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
}
testdf <- multipleListExtract(zillowTemp$response)
multipleListExtract <- function(input.list) {
for(each.list in input.list$children) {
tempList <- recursiveListExtract(each.list)
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
return(tempList)
}
testdf <- multipleListExtract(zillowTemp$response)
View(testdf)
zillowTemp$response
zillowTemp$response$children
zillowTemp$response$children$properties
zillowTemp$response$children$properties$children
zillowTemp$response$children$properties$children$comparables
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables)
View(testdf)
testdf <- multipleListExtract(zillowTemp$response$children$properties$children)
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables)
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables$children)
zillowTemp$response$children$properties$children$comparables
length(zillowTemp$response$children$properties$children$comparables)
length(zillowTemp$response$children$properties$children)
multipleListExtract <- function(input.list) {
for(i in 1:length(input.list$children)) {
tempList <- recursiveListExtract(each.list[[i]])
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
return(tempList)
}
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables)
multipleListExtract <- function(input.list) {
for(i in 1:length(input.list$children)) {
tempList <- recursiveListExtract(input.list[[i]])
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
return(tempList)
}
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables)
rm(testdf)
multipleListExtract <- function(input.list) {
for(each.list in input.list$children) {
tempList <- recursiveListExtract(each.list)
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
return(outList)
}
testdf <- multipleListExtract(zillowTemp$response$children$properties$children$comparables)
View(testdf)
recursiveListExtract <- function(input.list) {
if(("children" %in% attributes(input.list)$names) & !("value" %in% attributes(input.list$children$text)$names)) {
print("Debug - Detected children in list")
#recursively call the function
for(each.list in input.list$children){
temp <- recursiveListExtract(each.list)
if(length(temp)>0) {
if(exists('out')==TRUE) {
out <- cbind(out,temp)
} else {
out <- temp
}
}
}
}
if(("value" %in% attributes(input.list$children$text)$names)) {
print("Values detected - convert")
print(input.list$name)
print(input.list[[1]])
print(paste0(unlist(input.list[[1]]$value)))
out <- data.frame(paste0(input.list$children$text$value))
print(out)
colnames(out) <- input.list$name
print(out)
}
# if(exists("out") == FALSE) {
#   out <- NULL
# }
if(exists("out")==FALSE) {out <- data.frame()}
return(out)
}
multipleListExtract <- function(input.list) {
for(each.list in input.list$children) {
tempList <- recursiveListExtract(each.list)
if(exists('outList')==TRUE) {
outList <- bind_rows(outList,tempList)
} else {
outList <- tempList
}
}
return(outList)
}
